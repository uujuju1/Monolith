apply plugin: "java"

version '1.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_17

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v139'
    jabelVersion = "0.7.0"
    modCoreVersion = "a61878d7029"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    writeProcessors = {
        new File(rootDir, "annotations/src/main/resources/META-INF/services/").mkdirs()
        def processorFile = new File(rootDir, "annotations/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
        def text = new StringBuilder()
        def files = new File(rootDir, "annotations/src/main/java")
        files.eachFileRecurse(
                groovy.io.FileType.FILES
        ){ file ->
            boolean isProcessor = file.text.contains(" extends ModBaseProcessor") ||
                    (file.text.contains(" extends AbstractProcessor") && !file.text.contains("abstract class")) ||
                    file.text.contains("@ModAnnotations.AnnotationProcessor");
            if(file.name.endsWith(".java") && isProcessor){
                text.append(file.path.substring(files.path.length() + 1)).append("\n")
            }
        }

        processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
    }
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
    writeProcessors()
}

dependencies{

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:flabel:v137"
    // compileOnly "com.github.Anuken.MindustryJitpack:core:2bdc6ff570"
    // compileOnly "com.github.Anuken.Arc:arc-core:52dd2290d0"
    implementation "com.github.Zelaux.ZelauxModCore:core:$modCoreVersion"
    compileOnly "com.github.Zelaux.ZelauxModCore:annotations:$modCoreVersion"
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
